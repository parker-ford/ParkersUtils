#include "Packages/com.parker.utilities/Runtime/Shaders/Includes/ShaderUtils.cginc"

#pragma kernel CS_SplitR
#pragma kernel CS_SplitG
#pragma kernel CS_SplitB
#pragma kernel CS_SplitRGB

Texture2D<float4> _Source;
SamplerState sampler_Source;
float _Width, _Height;

RWTexture2D<float4> _RedChannel;
RWTexture2D<float4> _GreenChannel;
RWTexture2D<float4> _BlueChannel;

[numthreads(8,8,1)]
void CS_SplitR (uint3 id : SV_DispatchThreadID)
{
    float2 uv = float2(
        pixelToTexture(id.x, _Width),
        pixelToTexture(id.y, _Height)
    );
    float4 sample = _Source.SampleLevel(sampler_Source, uv, 0);
    _RedChannel[id.xy] = float4(sample.r, 0, 0, 0);
}

[numthreads(8,8,1)]
void CS_SplitG (uint3 id : SV_DispatchThreadID)
{
    float2 uv = float2(
        pixelToTexture(id.x, _Width),
        pixelToTexture(id.y, _Height)
    );
    float4 sample = _Source.SampleLevel(sampler_Source, uv, 0);
    _GreenChannel[id.xy] = float4(sample.g, 0, 0, 0);
}

[numthreads(8,8,1)]
void CS_SplitB (uint3 id : SV_DispatchThreadID)
{
    float2 uv = float2(
        pixelToTexture(id.x, _Width),
        pixelToTexture(id.y, _Height)
    );
    float4 sample = _Source.SampleLevel(sampler_Source, uv, 0);
    _BlueChannel[id.xy] = float4(sample.b, 0, 0, 0);
}

[numthreads(8,8,1)]
void CS_SplitRGB (uint3 id : SV_DispatchThreadID)
{
    float2 uv = float2(
        pixelToTexture(id.x, _Width),
        pixelToTexture(id.y, _Height)
    );
    float4 sample = _Source.SampleLevel(sampler_Source, uv, 0);
    _RedChannel[id.xy] = float4(sample.r, 0, 0, 0);
    _GreenChannel[id.xy] = float4(sample.g, 0, 0, 0);
    _BlueChannel[id.xy] = float4(sample.b, 0, 0, 0);
}
